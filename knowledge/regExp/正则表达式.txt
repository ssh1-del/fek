正则表达式

应用场景：
1.校验  2.查找  3.替换

基本要素
1. 字符类  2. 数字限定符    3. 位置限定符    4. 特殊符号

字符类
1. `.` 匹配除“\n”之外的任何单个字符，包括、\n的话使用（.|\n）。
2. `[ ]`匹配括号内的任意字符。
3. `-`在括号内表示范围。
4. `^`在`[]`内表示除括号内字符之外的任意字符。
5.`[[:xxx:]]`grep工具预定义的一些命名字符类，例如[[:alpha:]]匹配一个字母,[[:digit:]]匹配一个数字。
6.`\w` 匹配[字母][数字][下划线][汉字]
7.`\s` 匹配空白符
8.`\d` 匹配数字

数字限定符
1.`?` 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。
非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。
2.`+` 匹配前面子表达式的一次或者多次，例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。
3.`*` 匹配前面子表达式零次或者多次，例如，zo*能匹配"z"以及"zoo",等价于"{0,}"。
4.`{n}` n是一个非负数，可以匹配n次，例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。
5.`{n,}` n是一个非负数，至少匹配n次，例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。
6.`{n,m}` n,m是非负数，最少匹配n次最多匹配m次，例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。

位置限定符
1.`^` 匹配行首的位置。
2.`$` 匹配行末的位置，例如，^$，匹配空行。
3.`\<`匹配单词开头的位置。
4.`\>`匹配单词结尾的位置。
5.`\b`匹配单词开头或者结尾的位置。
6.`\B`匹配单词非开头非结尾的位置。

特殊符号
1.`\` 转译字符，普通字符转译为特殊字符，特殊字符转译为普通字符
2.`()`
3.`|` 两个表达式的关系是或

