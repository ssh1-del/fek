对于基于class写法的开发者，javaScript会给他们带来疑惑，javaScript是动态的，本身不提供class的实现。即使Es2015/Es6中引入class，那也是语法糖，是基于原型来创建。

当谈到继承的时候，javaScript中只有一种结构：对象。每个实例对象（object）都用个室私有的属性(_proto_)指向它的构造函数的原型对象(protoType),
该原型对象也有自己的一个原型对象，层层向上，直到一个对象的原型对象是null。根据定义null没有原型，并作为原型链的最后一环。

构造函数
构造函数模式的目的就是可以创建一个自定义的类，并创建这个类的实例，构造函数模式拥有了类和实例的概念。

使用：
1.改造函数的创建和普通的函数没有什么区别，构造函数的定义习惯首字母大写.
2.调用的时候，构造函数需要用new，普通函数就是直接调用就可以

function Person(name,age){
    this.name=name;
    this.age=age;
}

const person  = new Person('xiaohua',30);

console.log(person._proto_);
console.log(Person.protoType);

console.log(person._proto_ === Person.protoType)


原型链总结：
1:只要有constructor,就有对应的protoType原型对象。
2.只要有protoType,就有对应的constructor构造函数。
3.只要是对象，就会有__proto__指向自己构造函数的原型对象。


